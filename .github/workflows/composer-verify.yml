name: Composer Verify

on:
  workflow_call:
    inputs:
      phpVersions:
        default: '["8.3"]'
        type: string
    secrets:
      CODECOV_TOKEN:
        required: true

jobs:
  verify:
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.event.head_commit.message, 'ci(release):') }}

    permissions: write-all

    strategy:
      matrix:
          phpVersions: ${{ fromJSON(inputs.phpVersions) }}
    name: Composer Verify (PHP ${{ matrix.phpVersions }})

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP ${{ matrix.phpVersions }} with PECL extension
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.phpVersions }}
          coverage: xdebug
          tools: composer, phive

      - name: "Cache tools installed with PHIVE (PHP ${{ matrix.phpVersions }})"
        uses: "actions/cache@v3"
        with:
          path: "${{ runner.temp }}/.phive"
          key: "php-phive-${{ hashFiles('.phive/phars.xml') }}"
          restore-keys: "php-phive-"

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: "${{ runner.temp }}/.composer/cache"
          key: ${{ runner.os }}-${{ hashFiles('composer.lock', 'composer.json') }}

      - name: Composer install (PHP ${{ matrix.phpVersions }})
        env:
          COMPOSER_HOME: "${{ runner.temp }}/.composer"
          PHIVE_HOME: "${{ runner.temp }}/.phive"
        run: |
          composer validate
          composer --no-interaction global config --no-plugins allow-plugins.sitepark/composer-project true
          composer --no-interaction global require --dev sitepark/composer-project:dev-main

          # if composer.lock exists phive would not be found
          if [ ! -f composer.lock ]; then
            composer install --no-scripts
          fi

          # composer install is already executed by php-actions/composer@v6 but in composer.json post-install-cmd can be defined.
          # But these are only executed if a composer.lock exists.
          # See https://getcomposer.org/doc/articles/scripts.md#command-events
          # For libraries the composer.lock is not checked in and is not present at the first composer install call.
          # Then only with the second composer install call also the post-install-cmd are executed.
          composer install

      - name: phpstan (PHP ${{ matrix.phpVersions }})
        run: tools/phpstan analyse --memory-limit=512M --no-progress --no-interaction || true

      - name: phpcsfixer (PHP ${{ matrix.phpVersions }})
        if: ${{ hashFiles('.php-cs-fixer.dist.php') != '' }}
        run: |
          if [ -f tools/php-cs-fixer ]; then
              PHPCSFIXER_BIN=tools/php-cs-fixer
          elif [ -f vendor/bin/php-cs-fixer ]; then
              PHPCSFIXER_BIN=vendor/bin/php-cs-fixer
          else
              echo "php-cs-fixer not found"
              exit 1
          fi
          PHP_CS_FIXER_IGNORE_ENV=1 $PHPCSFIXER_BIN check --diff --show-progress none

      - name: phpcs (PHP ${{ matrix.phpVersions }})
        if: ${{ hashFiles('phpcs.xml.dist') != '' }}
        run: |
          if [ -f tools/phpcs ]; then
              PHPCS_BIN=tools/phpcs
          elif [ -f vendor/bin/phpcs ]; then
              PHPCS_BIN=vendor/bin/phpcs
          else
              echo "phpcs not found"
              exit 1
          fi
          $PHPCS_BIN --colors --report=full

      - name: phpcs_compatibilitycheck (PHP ${{ matrix.phpVersions }})
        run: |
          if [ -f tools/phpcs ]; then
          PHPCS_BIN=tools/phpcs
          elif [ -f vendor/bin/phpcs ]; then
              PHPCS_BIN=vendor/bin/phpcs
          else
              echo "phpcs not found"
              exit 1
          fi
          $PHPCS_BIN --standard=./phpcs.compatibilitycheck.xml --colors --report=full

      - name: phplint (PHP ${{ matrix.phpVersions }})
        run: |
          if [ -f tools/phplint ]; then
          PHPLINT_BIN=tools/phplint
          elif [ -f vendor/bin/phplint ]; then
              PHPLINT_BIN=vendor/bin/phplint
          else
              echo "phplint not found"
              exit 1
          fi
          $PHPLINT_BIN --no-progress

      - name: phpunit (PHP ${{ matrix.phpVersions }})
        run: |
          export XDEBUG_MODE=coverage
          tools/phpunit.phar -c phpunit.xml --log-junit var/log/phpunit-test-report.xml --coverage-cobertura phpunit-coverage.xml --coverage-text --colors=never

      - name: composer_audit (PHP ${{ matrix.phpVersions }})
        run: composer audit

      - name: Upload to Codecov (PHP ${{ matrix.phpVersions }})
        if: ${{ endsWith(inputs.phpVersions, format('"{0}"]', matrix.phpVersions)) }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./var/log/clover/clover.xml
          verbose: true
